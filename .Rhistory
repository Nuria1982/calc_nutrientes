# renv::init()
renv::restore()
install.packages(c("colorspace", "munsell"))
renv::status()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
install.packages("rsconnect")
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
library(rsconnect)
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
renv::status() #para ver si hay paquetes no instalados
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
e
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
renv::status() #para ver si hay paquetes no instalados
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(bslib)
library(shinymanager)
install.packages("shinymanager")
library(shiny)
library(bslib)
# install.packages("shinymanager")
library(shinymanager)
# credenciales para autenticación
credentials <- data.frame(
user = "usuario",
password = "usuario"
)
ui <- page_fluid(
page_fillable(
card(
h1("Aplicación"),
sliderInput("numeros", "Prueba", 1, 10, 5)
)
)
)
server <- function(input, output, session) {
# autenticación
res_auth <- secure_server(check_credentials = check_credentials(credentials))
}
# autenticación
ui <- secure_app(ui)
shinyApp(ui, server)
library(shinymanager)
# Base de datos inicial de usuarios
# Puedes inicializar una base más avanzada con funciones para agregar nuevos usuarios si es necesario
users <- data.frame(
user = c("admin", "user1"),
password = sapply(c("adminpass", "user1pass"), sodium::password_store),
name = c("Administrador", "Usuario 1"),
email = c("admin@example.com", "user1@example.com"),
admin = c(TRUE, FALSE), # Indica si el usuario es administrador
stringsAsFactors = FALSE
)
# Función para agregar un nuevo usuario
add_new_user <- function(user, password, name, email) {
new_user <- data.frame(
user = user,
password = sodium::password_store(password),
name = name,
email = email,
admin = FALSE, # Por defecto no es administrador
stringsAsFactors = FALSE
)
users <<- rbind(users, new_user)
}
runApp()
runApp()
runApp()
runApp()
runApp()
library(htmlwidgets)
add_eye_icon <- function(id, input_name) {
htmltools::tags$div(
style = "position:relative;",
tags$input(id = input_name,
type = "password",
class = "form-control",
name = input_name),
tags$span(
class = "glyphicon glyphicon-eye-open",
id = paste0(id, "_eye"),
style = "position:absolute; right:10px; top:10px; cursor:pointer; font-size:16px; padding-top:2px; padding-right:2px;"
)
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
usethis::create_github_token()
install.packages(usethis)
install.packages("usethis")
library(usethis)library(usethis)
library(usethis)
usethis::create_github_token()
gitcreds::gitcreds_set()
library(rsconnect)
library(bslib)
library(shiny)
library(shinycssloaders)
library(bsicons)
library(flexdashboard)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(shinyauthr)
library(htmlwidgets)
library(shinymanager)
library(shinymanager)
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
library(rsconnect)
library(bslib)
library(shiny)
library(shinycssloaders)
library(bsicons)
library(flexdashboard)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(shinyauthr)
library(htmlwidgets)
library(shinymanager)
library(RMySQL)
library(shinyjs)
library(bs4Dash)
library(fresh)
library(lubridate)
library(png)
library(readxl)
library(writexl)
library(openxlsx)
library(DBI)
library(RSQLite)
library(sodium)
library(kableExtra)
library(stringr)
library(purrr)
db <- dbConnect(
RMySQL::MySQL(),
dbname = "prueba",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root"
)
dbListTables(db)
if (!"user_base" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE user_base (
user VARCHAR(255),
password VARCHAR(255),
name VARCHAR(255),
email VARCHAR(255)
)
")
}
if (!"sessionids" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE sessionids (
user VARCHAR(255),
sessionid VARCHAR(255),
login_time DATETIME
)
")
}
dbExecute(db, "
INSERT INTO user_base (user, password, name, email) VALUES
('user1', ?, 'User One', 'user1@example.com'),
('user2', ?, 'User Two', 'user2@example.com')
", params = list(
sodium::password_store("pass1"),
sodium::password_store("pass2")
))
library(glue)
users <- tibble(
user = c('user1', 'user2'),
password = c(sodium::password_store("pass1"), sodium::password_store("pass2")),
name = c('User One', 'User Two'),
email = c('user1@example.com', 'user2@example.com')
)
# Construir consulta
query <- glue("INSERT INTO user_base (user, password, name, email) VALUES {values}",
values = paste0(
"('", users$user, "', '", users$password, "', '", users$name, "', '", users$email, "')",
collapse = ", "
)
)
dbExecute(db, query)
get_user_base <- function() {
db <- dbConnect(RMySQL::MySQL(),
dbname = "prueba",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root")
on.exit(dbDisconnect(db))
dbGetQuery(db, "SELECT * FROM user_base")
}
add_sessionid_to_db <- function(user, sessionid, conn = db) {
dbExecute(conn, "
INSERT INTO sessionids (user, sessionid, login_time) VALUES (?, ?, ?)
", params = list(user, sessionid, as.character(Sys.time())))
}
get_sessionids_from_db <- function(conn = db, expiry = cookie_expiry) {
dbGetQuery(conn, "
SELECT * FROM sessionids
WHERE login_time > NOW() - INTERVAL ? DAY
", params = list(expiry)) %>%
as_tibble()
}
save_new_user <- function(user, password, name, email, conn = db) {
dbExecute(conn, "
INSERT INTO user_base (user, password, name, email) VALUES (?, ?, ?, ?)
", params = list(
user,
sodium::password_store(password),
name,
email
))
}
db <- dbConnect(
RMySQL::MySQL(),
dbname = "DB_nutrientes",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root"
)
if (!"user_base" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE user_base (
user VARCHAR(255),
password VARCHAR(255),
name VARCHAR(255),
email VARCHAR(255)
)
")
}
if (!"sessionids" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE sessionids (
user VARCHAR(255),
sessionid VARCHAR(255),
login_time DATETIME
)
")
}
users <- tibble(
user = c('user1', 'user2'),
password = c(sodium::password_store("pass1"), sodium::password_store("pass2")),
name = c('User One', 'User Two'),
email = c('user1@example.com', 'user2@example.com')
)
# Construir consulta
query <- glue("INSERT INTO user_base (user, password, name, email) VALUES {values}",
values = paste0(
"('", users$user, "', '", users$password, "', '", users$name, "', '", users$email, "')",
collapse = ", "
)
)
dbExecute(db, query)
get_user_base <- function() {
db <- dbConnect(RMySQL::MySQL(),
dbname = "DB_nutrientes",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root")
on.exit(dbDisconnect(db))
dbGetQuery(db, "SELECT * FROM user_base")
}
add_sessionid_to_db <- function(user, sessionid, conn = db) {
dbExecute(conn, "
INSERT INTO sessionids (user, sessionid, login_time) VALUES (?, ?, ?)
", params = list(user, sessionid, as.character(Sys.time())))
}
get_sessionids_from_db <- function(conn = db, expiry = cookie_expiry) {
dbGetQuery(conn, "
SELECT * FROM sessionids
WHERE login_time > NOW() - INTERVAL ? DAY
", params = list(expiry)) %>%
as_tibble()
}
save_new_user <- function(user, password, name, email, conn = db) {
dbExecute(conn, "
INSERT INTO user_base (user, password, name, email) VALUES (?, ?, ?, ?)
", params = list(
user,
sodium::password_store(password),
name,
email
))
}
runApp()
runApp()
db <- dbConnect(
RMySQL::MySQL(),
dbname = "DB_nutrientes",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root"
)
if (!"user_base" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE user_base (
user VARCHAR(255),
password VARCHAR(255),
name VARCHAR(255),
email VARCHAR(255)
)
")
}
if (!"sessionids" %in% dbListTables(db)) {
dbExecute(db, "
CREATE TABLE sessionids (
user VARCHAR(255),
sessionid VARCHAR(255),
login_time DATETIME
)
")
}
users <- tibble(
user = c('user1', 'user2'),
password = c(sodium::password_store("pass1"), sodium::password_store("pass2")),
name = c('User One', 'User Two'),
email = c('user1@example.com', 'user2@example.com')
)
# Construir consulta
query <- glue("INSERT INTO user_base (user, password, name, email) VALUES {values}",
values = paste0(
"('", users$user, "', '", users$password, "', '", users$name, "', '", users$email, "')",
collapse = ", "
)
)
dbExecute(db, query)
get_user_base <- function() {
db <- dbConnect(RMySQL::MySQL(),
dbname = "DB_nutrientes",
host = "localhost", # Cambia esto si tu servidor no está en local
port = 3306,        # Cambia el puerto si no usas el predeterminado
user = "root",
password = "root")
on.exit(dbDisconnect(db))
dbGetQuery(db, "SELECT * FROM user_base")
}
add_sessionid_to_db <- function(user, sessionid, conn = db) {
dbExecute(conn, "
INSERT INTO sessionids (user, sessionid, login_time) VALUES (?, ?, ?)
", params = list(user, sessionid, as.character(Sys.time())))
}
get_sessionids_from_db <- function(conn = db, expiry = cookie_expiry) {
dbGetQuery(conn, "
SELECT * FROM sessionids
WHERE login_time > NOW() - INTERVAL ? DAY
", params = list(expiry)) %>%
as_tibble()
}
save_new_user <- function(user, password, name, email, conn = db) {
dbExecute(conn, "
INSERT INTO user_base (user, password, name, email) VALUES (?, ?, ?, ?)
", params = list(
user,
sodium::password_store(password),
name,
email
))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
last_row <- nrow(datos) + 2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
# renv::init()
renv::restore()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
install.packages("RMySQL")
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
