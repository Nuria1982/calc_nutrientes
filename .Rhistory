})
output$dosisN <- renderUI({
div(
class = "value-box",
style = "display: flex; flex-direction: column; align-items: center; justify-content: center; background-color: #e74c3c; color: white; border-radius: 10px; height: 160px; width: 300px; padding: 10px;",
div(
style = "font-size: 30px; font-weight: bold;",
paste(round(dosisN(), 1), "kg N / ha")
),
div(
style = "font-size: 18px; font-weight: bold; margin-bottom: 6px; text-align: center;",
"Dosis"
),
div(
class = "icon-container",
style = "font-size: 40px;",
icon("tint")
)
)
})
#Grafico nitrogeno
# output$tortaN <- renderPlotly({
#   values <- c(ofertaN(), demandaN(), dosisN())
#   labels <- c("Oferta", "Demanda", "Dosis")
#
#
#   plot_ly(labels = labels, values = values, type = 'pie',
#           textinfo = 'label+percent',
#           marker = list(colors = c('#06A77D', '#FF9914', '#C52233'))) %>%
#     layout(title = "",
#            plot_bgcolor = "rgba(0,0,0,0)",
#            paper_bgcolor = "rgba(0,0,0,0)",
#            font = list(family = "Arial", size = 18, color = "black", weight = "bold"),
#            margin = list(t = 40, b = 40),
#            showlegend = FALSE
#     )
# })
output$dosis_nitrogeno <- renderGauge({
gauge(dosisN(), min = 0, max = 100, symbol = "kg N/ha",
gaugeSectors(success = c(0, 50), warning = c(51, 80), danger = c(81, 100)),
label = paste0("Dosis N"))
})
#Múltiples lotes
output$descarga_modelo_nitrogeno <- downloadHandler(
filename = function() {
"data_usuario.xlsx"
},
content = function(file) {
# Crear un dataframe modelo
modelo <- data.frame(
Lote = c(NA, NA),
Cultivo = c(NA, NA),
Antecesor = c(NA, NA),
Rendimiento_objetivo = c(NA, NA),
Proteína_objetivo = c(NA, NA),
nitrato_20 = c(NA, NA),
nitrato_40 = c(NA, NA),
nitrato_60 = c(NA, NA),
Nan_20 = c(NA, NA),
Densidad_aparente = c(NA, NA)
)
# Escribir el archivo Excel usando writexl
writexl::write_xlsx(modelo, file)
}
)
data_usuario <- reactive({
if (is.null(input$archivo_usuario)) {
return(NULL)  # Si no hay archivo subido, devuelve NULL
}
ext <- tools::file_ext(input$archivo_usuario$name)
# Leer el archivo según su extensión
if (ext == "csv") {
data <- read.csv(input$archivo_usuario$datapath)
} else if (ext == "xlsx") {
data <- readxl::read_xlsx(input$archivo_usuario$datapath)
} else {
showNotification("Formato de archivo no soportado.", type = "error")
return(NULL)
}
# Verificar si el archivo tiene las columnas requeridas
required_columns <- c("Lote", "Cultivo", "Antecesor", "Rendimiento_objetivo", "nitrato_20",
"nitrato_40", "nitrato_60",
"Nan_20", "Densidad_aparente")
missing_columns <- setdiff(required_columns, colnames(data))
if (length(missing_columns) > 0) {
showNotification(
paste("El archivo no tiene las columnas requeridas:",
paste(missing_columns, collapse = ", ")),
type = "error"
)
return(NULL)  # Si faltan columnas, devolver NULL
}
# Si falta la columna `Densidad aparente`, crearla con el valor predeterminado
if (!"Densidad aparente" %in% colnames(data)) {
data$Densidad_aparente <- 1.2
}
# Reemplazar valores vacíos (NA) en `Densidad aparente` por 2.4
data$Densidad_aparente <- ifelse(
is.na(data$Densidad_aparente) | data$Densidad_aparente == "",
1.2,
as.numeric(data$Densidad_aparente)
)
# Confirmar al usuario que el archivo se ha procesado correctamente
showNotification("Archivo subido correctamente.", type = "message")
return(data)
})
resultados <- reactive({
req(data_usuario())
datos <- data_usuario()
datos$Cultivo <- trimws(datos$Cultivo)
datos$Antecesor <- trimws(datos$Antecesor)
# Convertir columnas numéricas
datos$nitrato_20 <- as.numeric(datos$nitrato_20)
datos$nitrato_40 <- as.numeric(datos$nitrato_40)
datos$nitrato_60 <- as.numeric(datos$nitrato_60)
datos$Nan_20 <- as.numeric(datos$Nan_20)
datos$Densidad_aparente <- as.numeric(datos$Densidad_aparente)
# Calcular N disponible
datos <- datos %>%
mutate(
N_disponible = ((nitrato_20 * Densidad_aparente * 2) +
nitrato_40 +
nitrato_60),
Mineralizacion = case_when(
Cultivo == "maiz" ~ 3.2,
Cultivo == "trigo" ~ 2.2,
Cultivo == "girasol" ~ 1.0,
Cultivo == "papa" ~ 3.2,
TRUE ~ 1.0
),
Nan_total = Nan_20 * Mineralizacion,
Efecto_antecesor = case_when(
Cultivo == "trigo" & Antecesor == "soja" ~ 20,
Cultivo == "trigo" & Antecesor == "maiz" ~ -30,
Cultivo == "trigo" & Antecesor == "girasol" ~ 1,
Cultivo == "trigo" & Antecesor == "papa" ~ 1,
TRUE ~ 1
)
)
req_sistema <- c(maiz = 30, trigo = 50, girasol = 60, papa = 6)
req_planta <- c(maiz = 20, trigo = 30, girasol = 40, papa = 4)
# Calcular Oferta, Demanda y DosisN por Lote
datos <- datos %>%
mutate(
Requerimiento = case_when(
!is.na(Nan_20) ~ case_when(
Cultivo == "maiz" ~ req_sistema["maiz"],
Cultivo == "trigo" ~ req_sistema["trigo"],
Cultivo == "girasol" ~ req_sistema["girasol"],
Cultivo == "papa" ~ req_sistema["papa"],
TRUE ~ 0
),
is.na(Nan_20) ~ case_when(
Cultivo == "maiz" ~ req_planta["maiz"],
Cultivo == "trigo" ~ req_planta["trigo"],
Cultivo == "girasol" ~ req_planta["girasol"],
Cultivo == "papa" ~ req_planta["papa"],
TRUE ~ 0
)
),
OfertaN = N_disponible + Nan_total + Efecto_antecesor,
DemandaN = Rendimiento_objetivo * Requerimiento,
DosisN = DemandaN - OfertaN
)
# Seleccionar columnas relevantes
datos_resultado <- datos %>%
select(Lote, Cultivo, Antecesor, N_disponible, Nan_total, OfertaN, DemandaN, DosisN) %>%
rename(`Nan Total (kg/ha)` = Nan_total,
`Nitrogeno Disponible (kg/ha)` = N_disponible,
`Oferta N (kg/ha)` = OfertaN,
`Demanda N (kg/ha)` = DemandaN,
`Dosis N (kg/ha)` = DosisN)
return(datos_resultado)
})
# Renderizar tabla con resultados
output$resultados_tabla <- renderTable({
req(resultados())
resultados()
})
output$download_data <- downloadHandler(
filename = function() {
paste("resultados_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(resultados(), file, row.names = FALSE)
}
)
output$multi_lotes <- renderPlot({
req(resultados())
datos <- resultados()
req("Lote" %in% names(datos), "Cultivo" %in% names(datos))
datos <- datos %>%
mutate(Titulo = paste("Lote", Lote, "-", toupper(Cultivo)))
datos_long <- datos %>%
pivot_longer(
cols = c(`Demanda N (kg/ha)`, `Oferta N (kg/ha)`, `Dosis N (kg/ha)`),
names_to = "Tipo",
values_to = "Valor"
) %>%
mutate(Tipo = factor(Tipo, levels = c(
"Demanda N (kg/ha)",
"Oferta N (kg/ha)",
"Dosis N (kg/ha)"
)))
ggplot(datos_long, aes(x = Tipo, y = Valor, fill = Tipo, color = Tipo)) +
geom_bar(stat = "identity", position = "dodge", size = 0.5) +
geom_text(aes(label = round(Valor, 1)),
position = position_dodge(width = 0.9),
vjust = 2.0,
size = 6,
fontface = "bold",
color = "black") +
scale_fill_manual(values = c(
"Demanda N (kg/ha)" = alpha("#FF9914", 0.6),
"Oferta N (kg/ha)" = alpha("#06A77D", 0.6),
"Dosis N (kg/ha)" = alpha("#C52233", 0.6))) +
scale_color_manual(values = c(
"Demanda N (kg/ha)" = alpha("#FF9914"),
"Oferta N (kg/ha)" = alpha("#06A77D"),
"Dosis N (kg/ha)" = alpha("#C52233"))) +
facet_wrap(~ Titulo, ncol = 3) +
labs(
title = "",
x = "",
y = "kg/ha"
) +
theme_minimal() +
theme(
axis.text.y = element_text(face = "bold", size = 18),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(face = "bold", size = 18),
legend.text = element_text(face = "bold", size = 18),
legend.title = element_blank(),
legend.position = "top",
strip.text = element_text(face = "bold", size = 16)
) +
scale_y_continuous(limits = c(0, max(datos_long$Valor, na.rm = TRUE)))
})
}
# Run the app ----
shinyApp(ui, server )
on.exit(dbDisconnect(db), add = TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(fresh)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
renv::restore()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
dosis_data <- data.frame(
cultivo = c("Soja", "Soja", "Soja", "Soja",
"Trigo", "Trigo", "Trigo", "Trigo", "Trigo", "Trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15, 0, 10),  # Límites mínimos de P
P_max = c(5, 10, 15, Inf, 10, Inf)  # Límites máximos de P
)
runApp()
dosis_data <- data.frame(
cultivoP = c("soja", "soja", "soja", "soja",
"trigo", "trigo", "trigo", "trigo", "trigo", "trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15,
0, 10, 15, 20, 25, 30,
0, 10, 15, 20,
0, 5, 10, 15,
0, 10, 15, 20, 25, 30),
P_max = c(5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf,
10, 15, 20, Inf,
5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf)
)
dosis_data
dosis_data <- dosis_data %>%
mutate(
min_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))),
max_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))
)
dosis_data
runApp()
dosis_data <- data.frame(
cultivoP = c("soja", "soja", "soja", "soja",
"trigo", "trigo", "trigo", "trigo", "trigo", "trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15,
0, 10, 15, 20, 25, 30,
0, 10, 15, 20,
0, 5, 10, 15,
0, 10, 15, 20, 25, 30),
P_max = c(5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf,
10, 15, 20, Inf,
5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf)
)
dosis_data <- dosis_data %>%
mutate(
min_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))),
max_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))
)
dosis_data
runApp()
dosis_data <- dosis_data %>%
mutate(
min_dosis = ifelse(dosis == "0", 0, as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1)))),
max_dosis = ifelse(dosis == "0", 0, as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2))))
)
dosis_data
dosis_data <- dosis_data %>%
mutate(
# Dividir la dosis en min_dosis y max_dosis, manejando el caso cuando dosis es "0"
min_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))), NA)),
max_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))),
ifelse(dosis == "100 kg/ha", 100,
ifelse(dosis == "80 kg/ha", 80,
ifelse(dosis == "60 kg/ha", 60,
ifelse(dosis == "40 kg/ha", 40,
ifelse(dosis == "20 kg/ha", 20, NA)))))))
dosis_data <- dosis_data %>%
mutate(
# Dividir la dosis en min_dosis y max_dosis, manejando el caso cuando dosis es "0"
min_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))), NA)),
max_dosis = case_when(
dosis == "0" ~ 0,  # Si la dosis es 0, asignamos 0
dosis == "100 kg/ha" ~ 100,  # Si la dosis es 100 kg/ha, asignamos 100
dosis == "80 kg/ha" ~ 80,  # Si la dosis es 80 kg/ha, asignamos 80
dosis == "60 kg/ha" ~ 60,  # Si la dosis es 60 kg/ha, asignamos 60
dosis == "40 kg/ha" ~ 40,  # Si la dosis es 40 kg/ha, asignamos 40
dosis == "20 kg/ha" ~ 20,  # Si la dosis es 20 kg/ha, asignamos 20
grepl("kg/ha", dosis) ~ as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2))),  # Extrae el valor máximo en rangos
TRUE ~ NA_real_  # Si no se cumple ninguna de las condiciones, asigna NA
)
)
dosis_data
runApp()
shiny::runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
shiny::runApp()
shiny::runApp()
output$descarga_modelo <- downloadHandler(
filename = function() {
"data_usuario.xlsx"
},
content = function(file) {
# Crear un dataframe modelo
modelo <- data.frame(
Lote = c(1, 1, 1),
Cultivo = c("maiz", "maiz", "maiz"),
Rendimiento_objetivo = c(NA, NA, NA),
Efecto_antecesor = c(NA, NA, NA),
Proteina_objetivo = c(NA, NA, NA),
Nan_20 = c(NA, NA, NA),
Densidad_aparente = c(1.2, NA, NA),
Estrato = c("0-20", "20-40", "40-60"),
N_nitrato = c(NA, NA, NA),
P_extractable = c(NA, NA, NA),
)
# Crear la segunda hoja: unidades
unidades <- data.frame(
Variable = c("Lote", "Cultivo", "Rendimiento_objetivo", "Efecto_antecesor", "Proteina_objetivo",
"Nan_20", "Densidad_aparente", "Estrato", "N_nitrato", "P_extractable"),
Unidad = c("Número de lote", "Nombre de cultivo", "tn/ha", "kg/ha", "%", "mg/kg", "g/cm³", "Rango de profundidad", "mg/kg", "P Bray")
)
# Crear la tercera hoja: aclaraciones
aclaraciones <- data.frame(
Campo = c("Lote", "Cultivo", "Rendimiento_objetivo"),
Detalle = c(
"Identificación del lote (nombre o código)",
"Cultivo actual sembrado en el lote",
"Rendimiento objetivo esperado del cultivo"
)
)
library(openxlsx)
wb <- createWorkbook()
# Agregar hojas al archivo
addWorksheet(wb, "Modelo")
addWorksheet(wb, "Unidades")
addWorksheet(wb, "Aclaraciones")
# Escribir los datos en las hojas
writeData(wb, "Modelo", modelo)
writeData(wb, "Unidades", unidades)
writeData(wb, "Aclaraciones", aclaraciones)
# Aplicar formato de celdas con fondo gris para las celdas que no requieren datos
estilo_gris <- createStyle(fgFill = "gray90")
addStyle(wb, "Modelo", style = estilo_gris, rows = c(3:4), cols = c(3, 4, 5, 6, 7, 8), gridExpand = TRUE)
# Guardar el archivo temporal
saveWorkbook(wb, file, overwrite = TRUE)
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
shiny::runApp()
install.packages("ggpattern")
library(ggpattern)
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("purrr")
runApp()
runApp()
library(purrr)
shiny::runApp()
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
shiny::runApp()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# renv::snapshot()
renv::init()
renv::snapshot()
# renv::snapshot()
renv::init()
shiny::runApp()
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
