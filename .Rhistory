colnames(datos) <- column_units[colnames(datos)]
library(openxlsx)
wb <- createWorkbook()
addWorksheet(wb, "Datos")
writeData(wb, "Datos", datos)
estilo_general1 <- createStyle(fgFill = "gray90",
textDecoration = "bold",
border = "Bottom",
borderColour = "black",
borderStyle = "thin",
wrapText = TRUE )
addStyle(wb, "Datos", style = estilo_general1, rows = 1, cols = c(1:5), gridExpand = TRUE)
saveWorkbook(wb, file, overwrite = TRUE)
}
)
data_monitoreo <- reactive({
if (is.null(input$archivo_monitoreo)) {
return(NULL)
}
ext <- tools::file_ext(input$archivo_monitoreo$name)
if (ext == "csv") {
data <- read.csv(input$archivo_monitoreo$datapath)
} else if (ext == "xlsx") {
data <- readxl::read_xlsx(input$archivo_monitoreo$datapath, sheet = "Datos")
} else {
showNotification("Formato de archivo no soportado.", type = "error")
return(NULL)
}
# Verificar si el archivo tiene las columnas requeridas
required_columns <- c("Lote", "Cultivo", "Estadio", "Índice de vegetación", "Índice de franja de referencia")
missing_columns <- setdiff(required_columns, colnames(data))
if (length(missing_columns) > 0) {
showNotification(
paste("El archivo no tiene las columnas requeridas:",
paste(missing_columns, collapse = ", ")),
type = "error"
)
return(NULL)
}
# Renombrar las columnas con las unidades correspondientes
column_original <- c(
Lote = "Lote",
Cultivo = "Cultivo",
`Estadio` = "Estadio" ,
`Índice de vegetación` = "Indice_vegetación",
`Índice de franja de referencia` = "Indice_franja_referencia"
)
# Aplicar los nuevos nombres al data.frame
colnames(data) <- column_original[colnames(data)]
colnames(data) <- tolower(colnames(data))
data$cultivo <- tolower(data$cultivo)
data$estadio <- tolower(data$estadio)
# Confirmar al usuario que el archivo se ha procesado correctamente
showNotification("Archivo subido correctamente.", type = "message")
return(data)
})
resultados_monitoreo <- reactive({
req(data_monitoreo())
datos <- data_monitoreo()
datos <- datos %>%
mutate(
indice_suf_nitrogeno = round(`indice_vegetación` / `indice_franja_referencia`, 2)
) %>%
mutate(
dosis_monitoreo = case_when(
cultivo == "maiz" ~ round(324 - 329 * (indice_suf_nitrogeno^3.12), 0),
cultivo == "trigo" ~ round(509 - 657 * (indice_suf_nitrogeno^3.52), 0),
cultivo == "papa" ~ round(336 - 346 * (indice_suf_nitrogeno^3.36), 0),
TRUE ~ NA_real_ # Manejar casos donde el cultivo no coincide
)
)
datos_resultado <- datos %>%
select(
lote, cultivo, indice_suf_nitrogeno, dosis_monitoreo
) %>%
rename(`Lote` = lote,
`Cultivo` = cultivo,
`Índice de suficiencia de nitrógeno` = indice_suf_nitrogeno,
`Dosis óptima económica (kg N / ha)` = dosis_monitoreo
)
return(datos_resultado)
})
output$tabla_monitoreoN <- renderUI({
data <- resultados_monitoreo()
tabla_html <- paste0(
"<table style='width: 100%; border-collapse: collapse;'>",
"<thead><tr>",
"<th style='background-color: #CCCCCC; padding: 5px;'>Lote</th>",
"<th style='background-color: #CCCCCC; padding: 5px;'>Cultivo</th>",
"<th style='background-color: #A3B18A60; padding: 5px;'>Índice de suficiencia de nitrógeno</th>",
"<th style='background-color: #58815760; padding: 5px;'>Dosis óptima económica <br>(kg N / ha)</th>",
"</tr></thead>",
"<tbody>",
paste(
apply(data, 1, function(row) {
paste0(
"<tr>",
paste0("<td style='padding: 10px;'>", row, "</td>", collapse = ""),
"</tr>"
)
}),
collapse = ""
),
"</tbody></table>"
)
HTML(tabla_html)
})
output$descarga_monitoreoN <- downloadHandler(
filename = function() {
paste("monitoreoN_", Sys.Date(), ".xlsx", sep = "")
},
content = function(file) {
write_xlsx(resultados_monitoreo(), file)
}
)
}
runApp()
runApp()
runApp()
excel_url <- "https://intaarg-my.sharepoint.com/:x:/g/personal/lewczuk_nuria_inta_gob_ar/EciVc8sF6BRHi6szY_uENk8BlSjNuxRN8Ikt4tVUpjRlCg?e=aUgRWm"
# Función para descargar y leer la base de usuarios
get_user_base <- function() {
temp_file <- tempfile(fileext = ".xlsx")
GET(url = excel_url, write_disk(temp_file, overwrite = TRUE))
users <- tryCatch(read_xlsx(temp_file, sheet = "users"), error = function(e) NULL)
if (is.null(users)) {
# Si no hay usuarios, inicializar una base vacía
data.frame(
id = integer(),
user = character(),
password = c(digest::sodium::password_store("admin123"), digest::sodium::password_store("test123")),
excel_url <- "https://intaarg-my.sharepoint.com/:x:/g/personal/lewczuk_nuria_inta_gob_ar/EciVc8sF6BRHi6szY_uENk8BlSjNuxRN8Ikt4tVUpjRlCg?e=aUgRWm"
# Función para descargar y leer la base de usuarios
get_user_base <- function() {
temp_file <- tempfile(fileext = ".xlsx")
GET(url = excel_url, write_disk(temp_file, overwrite = TRUE))
users <- tryCatch(read_xlsx(temp_file, sheet = "users"), error = function(e) NULL)
if (is.null(users)) {
# Si no hay usuarios, inicializar una base vacía
data.frame(
id = integer(),
user = character(),
password = c(digest::sodium::password_store("admin123"), digest::sodium::password_store("test123")),
runApp()
#### Excel online ###
users <- get_user_base()
print(users)
runApp()
runApp()
runApp()
excel_url <- "https://intaarg-my.sharepoint.com/:x:/g/personal/lewczuk_nuria_inta_gob_ar/EciVc8sF6BRHi6szY_uENk8BlSjNuxRN8Ikt4tVUpjRlCg?e=aUgRWm"
# Función para descargar y leer la base de usuarios
get_user_base <- function() {
temp_file <- tempfile(fileext = ".xlsx")
GET(url = excel_url, write_disk(temp_file, overwrite = TRUE))
users <- tryCatch(read_xlsx(temp_file, sheet = "users"), error = function(e) NULL)
if (is.null(users)) {
# Si no hay usuarios, inicializar una base vacía
data.frame(
id = integer(),
user = character(),
password = character(),
name = character(),
email = character(),
registration_date = character(),
stringsAsFactors = FALSE
)
} else {
users
}
}
get_user_base <- reactive({
# Descarga y lee el archivo Excel
temp_file <- tempfile(fileext = ".xlsx")
httr::GET(url = excel_url, httr::write_disk(temp_file, overwrite = TRUE))
readxl::read_xlsx(temp_file, sheet = "users")
})
get_user_base
# Función para guardar usuarios en la base de datos
save_user_base <- function(data) {
temp_file <- tempfile(fileext = ".xlsx")
write.xlsx(data, temp_file, sheetName = "users", overwrite = TRUE)
PUT(url = excel_url, body = upload_file(temp_file))
}
# Función para agregar un nuevo usuario
save_new_user <- function(user, password, name, email) {
users <- get_user_base()
new_user <- data.frame(
id = if (nrow(users) > 0) max(users$id) + 1 else 1,
user = user,
password_hash = digest(password, algo = "sha256"),
name = name,
email = email,
registration_date = Sys.time(),
stringsAsFactors = FALSE
)
users <- rbind(users, new_user)
save_user_base(users)
}
save_new_user
users
excel_url
excel_url <- "https://intaarg-my.sharepoint.com/:x:/g/personal/lewczuk_nuria_inta_gob_ar/EciVc8sF6BRHi6szY_uENk8BlSjNuxRN8Ikt4tVUpjRlCg?e=aUgRWm"
# Función para descargar y leer la base de usuarios
get_user_base <- function() {
temp_file <- tempfile(fileext = ".xlsx")
GET(url = excel_url, write_disk(temp_file, overwrite = TRUE))
users <- tryCatch(read_xlsx(temp_file, sheet = "users"), error = function(e) NULL)
if (is.null(users)) {
# Si no hay usuarios, inicializar una base vacía
data.frame(
id = integer(),
user = character(),
password = character(),
name = character(),
email = character(),
registration_date = character(),
stringsAsFactors = FALSE
)
} else {
users
}
}
get_user_base <- reactive({
# Descarga y lee el archivo Excel
temp_file <- tempfile(fileext = ".xlsx")
httr::GET(url = excel_url, httr::write_disk(temp_file, overwrite = TRUE))
readxl::read_xlsx(temp_file, sheet = "users")
})
# Función para guardar usuarios en la base de datos
save_user_base <- function(data) {
temp_file <- tempfile(fileext = ".xlsx")
write.xlsx(data, temp_file, sheetName = "users", overwrite = TRUE)
PUT(url = excel_url, body = upload_file(temp_file))
}
# Función para agregar un nuevo usuario
save_new_user <- function(user, password, name, email) {
users <- get_user_base()
new_user <- data.frame(
id = if (nrow(users) > 0) max(users$id) + 1 else 1,
user = user,
password_hash = digest(password, algo = "sha256"),
name = name,
email = email,
registration_date = Sys.time(),
stringsAsFactors = FALSE
)
users <- rbind(users, new_user)
save_user_base(users)
}
users
#### Excel online ###
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = get_sessionids_from_db,
cookie_setter = add_sessionid_to_db,
log_out = reactive(logout_init())
)
runApp()
runApp()
runApp()
library(rsconnect)
library(bslib)
library(shiny)
library(shinycssloaders)
library(bsicons)
library(flexdashboard)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(shinyauthr)
library(htmlwidgets)
#library(RMySQL)
library(shinyjs)
library(bs4Dash)
library(fresh)
library(lubridate)
library(png)
library(httr)
library(readxl)
library(writexl)
library(openxlsx)
library(DBI)
library(RSQLite)
library(sodium)
library(kableExtra)
library(stringr)
library(purrr)
library(glue)
library(googlesheets4)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(shiny.reactlog = TRUE)
runApp()
runApp()
library(shiny)
library(shiny)
library(shinyauthr)
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = function() NULL,
cookie_setter = function() NULL
)
}
shinyApp(ui, server)
library(shiny)
library(shinyauthr)
# Diccionario en memoria para simular almacenamiento de cookies
session_cookies <- list()
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
# cookie_getter
get_sessionids_from_memory <- function() {
session_cookies[[session$token]]
}
# cookie_setter
set_sessionid_in_memory <- function(sessionid) {
session_cookies[[session$token]] <- sessionid
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = get_sessionids_from_memory,
cookie_setter = set_sessionid_in_memory
)
}
shinyApp(ui, server)
library(shiny)
library(shinyauthr)
# Diccionario en memoria para simular almacenamiento de cookies
session_cookies <- list()
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
# cookie_getter
get_sessionids_from_memory <- function() {
session_cookies[[session$token]]
}
# cookie_setter
set_sessionid_in_memory <- function(sessionid) {
session_cookies[[session$token]] <- sessionid
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = FALSE  # Desactiva el manejo de cookies
)
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
renv::status() #para ver si hay paquetes no instalados
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# renv::snapshot() #para capturar todas las dependencias
renv::status() #para ver si hay paquetes no instalados
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
