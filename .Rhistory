readxl::read_xlsx(temp_file, sheet = "users")
})
get_user_base
# Función para guardar usuarios en la base de datos
save_user_base <- function(data) {
temp_file <- tempfile(fileext = ".xlsx")
write.xlsx(data, temp_file, sheetName = "users", overwrite = TRUE)
PUT(url = excel_url, body = upload_file(temp_file))
}
# Función para agregar un nuevo usuario
save_new_user <- function(user, password, name, email) {
users <- get_user_base()
new_user <- data.frame(
id = if (nrow(users) > 0) max(users$id) + 1 else 1,
user = user,
password_hash = digest(password, algo = "sha256"),
name = name,
email = email,
registration_date = Sys.time(),
stringsAsFactors = FALSE
)
users <- rbind(users, new_user)
save_user_base(users)
}
save_new_user
users
excel_url
excel_url <- "https://intaarg-my.sharepoint.com/:x:/g/personal/lewczuk_nuria_inta_gob_ar/EciVc8sF6BRHi6szY_uENk8BlSjNuxRN8Ikt4tVUpjRlCg?e=aUgRWm"
# Función para descargar y leer la base de usuarios
get_user_base <- function() {
temp_file <- tempfile(fileext = ".xlsx")
GET(url = excel_url, write_disk(temp_file, overwrite = TRUE))
users <- tryCatch(read_xlsx(temp_file, sheet = "users"), error = function(e) NULL)
if (is.null(users)) {
# Si no hay usuarios, inicializar una base vacía
data.frame(
id = integer(),
user = character(),
password = character(),
name = character(),
email = character(),
registration_date = character(),
stringsAsFactors = FALSE
)
} else {
users
}
}
get_user_base <- reactive({
# Descarga y lee el archivo Excel
temp_file <- tempfile(fileext = ".xlsx")
httr::GET(url = excel_url, httr::write_disk(temp_file, overwrite = TRUE))
readxl::read_xlsx(temp_file, sheet = "users")
})
# Función para guardar usuarios en la base de datos
save_user_base <- function(data) {
temp_file <- tempfile(fileext = ".xlsx")
write.xlsx(data, temp_file, sheetName = "users", overwrite = TRUE)
PUT(url = excel_url, body = upload_file(temp_file))
}
# Función para agregar un nuevo usuario
save_new_user <- function(user, password, name, email) {
users <- get_user_base()
new_user <- data.frame(
id = if (nrow(users) > 0) max(users$id) + 1 else 1,
user = user,
password_hash = digest(password, algo = "sha256"),
name = name,
email = email,
registration_date = Sys.time(),
stringsAsFactors = FALSE
)
users <- rbind(users, new_user)
save_user_base(users)
}
users
#### Excel online ###
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = get_sessionids_from_db,
cookie_setter = add_sessionid_to_db,
log_out = reactive(logout_init())
)
runApp()
runApp()
runApp()
library(rsconnect)
library(bslib)
library(shiny)
library(shinycssloaders)
library(bsicons)
library(flexdashboard)
library(DT)
library(tidyr)
library(ggplot2)
library(plotly)
library(dplyr)
library(bslib)
library(shinythemes)
library(shinyauthr)
library(htmlwidgets)
#library(RMySQL)
library(shinyjs)
library(bs4Dash)
library(fresh)
library(lubridate)
library(png)
library(httr)
library(readxl)
library(writexl)
library(openxlsx)
library(DBI)
library(RSQLite)
library(sodium)
library(kableExtra)
library(stringr)
library(purrr)
library(glue)
library(googlesheets4)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(shiny.reactlog = TRUE)
runApp()
runApp()
library(shiny)
library(shiny)
library(shinyauthr)
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = function() NULL,
cookie_setter = function() NULL
)
}
shinyApp(ui, server)
library(shiny)
library(shinyauthr)
# Diccionario en memoria para simular almacenamiento de cookies
session_cookies <- list()
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
# cookie_getter
get_sessionids_from_memory <- function() {
session_cookies[[session$token]]
}
# cookie_setter
set_sessionid_in_memory <- function(sessionid) {
session_cookies[[session$token]] <- sessionid
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = TRUE,
sessionid_col = sessionid,
cookie_getter = get_sessionids_from_memory,
cookie_setter = set_sessionid_in_memory
)
}
shinyApp(ui, server)
library(shiny)
library(shinyauthr)
# Diccionario en memoria para simular almacenamiento de cookies
session_cookies <- list()
ui <- fluidPage(
shinyauthr::loginUI("login")
)
server <- function(input, output, session) {
get_user_base <- function() {
data.frame(
user = c("test_user"),
password = c(sodium::password_store("test_pass")),
name = c("Test User"),
email = c("test@example.com"),
sessionid = NA
)
}
# cookie_getter
get_sessionids_from_memory <- function() {
session_cookies[[session$token]]
}
# cookie_setter
set_sessionid_in_memory <- function(sessionid) {
session_cookies[[session$token]] <- sessionid
}
credentials <- shinyauthr::loginServer(
id = "login",
data = get_user_base(),
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
cookie_logins = FALSE  # Desactiva el manejo de cookies
)
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
renv::status() #para ver si hay paquetes no instalados
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# renv::snapshot() #para capturar todas las dependencias
renv::status() #para ver si hay paquetes no instalados
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
conversion_table <- data.frame(
origen = c("N", "N", "N", "N", "K", "KCl", "CaO", "CaCO3", "MgO", "MgO", "MgO", "P", "S", "S", "S", "%"),
destino = c("NO3", "NH3", "(NH4)SO4", "(NH4)NO3", "K2O", "K2O", "Ca", "CaO", "Mg", "MgSO4", "MgCO3", "P2O5", "SO2", "SO3", "SO4", "ppm"),
factor = c(4.43, 1.22, 4.72, 2.86, 1.2, 0.63, 0.71, 0.56, 0.6, 2.99, 2.09, 2.29, 2, 0.4, 3, 10000)
)
runApp()
install.packages("rhandsontable")
conversiones <- data.frame(
Valor = rep(1, 16),  # el usuario puede editar esta columna
Origen = c("N", "N", "N", "N", "K", "KCl", "CaO", "CaCO3", "MgO", "MgO", "MgO", "P", "S", "S", "S", "%"),
Destino = c("NO3", "NH3", "(NH4)SO4", "(NH4)NO3", "K2O", "K2O", "Ca", "CaO", "Mg", "MgSO4", "MgCO3", "P2O5", "SO2", "SO3", "SO4", "ppm"),
Factor = c(4.43, 1.22, 4.72, 2.86, 1.2, 0.63, 0.71, 0.56, 0.6, 2.99, 2.09, 2.29, 2, 0.4, 3, 10000),
Resultado = rep(NA, 16)  # esta se actualizará automáticamente
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::snapshot() #para capturar todas las dependencias
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
limpiar_valores <- function(x) {
suppressWarnings(as.numeric(gsub("[^0-9,.-]", "", x)))
}
datos <- datos %>%
mutate(across(c(nan, s_sulfato_20, s_sulfato_40, s_sulfato_60, densidad_aparente, nutriente_en_grano_s),
~ limpiar_valores(.)))
datos <- data_usuario()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
