"Demanda N (kg/ha)" = alpha("#FF9914"),
"Oferta N (kg/ha)" = alpha("#06A77D"),
"Dosis N (kg/ha)" = alpha("#C52233"))) +
facet_wrap(~ Titulo, ncol = 3) +
labs(
title = "",
x = "",
y = "kg/ha"
) +
theme_minimal() +
theme(
axis.text.y = element_text(face = "bold", size = 18),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(face = "bold", size = 18),
legend.text = element_text(face = "bold", size = 18),
legend.title = element_blank(),
legend.position = "top",
strip.text = element_text(face = "bold", size = 16)
) +
scale_y_continuous(limits = c(0, max(datos_long$Valor, na.rm = TRUE)))
})
}
# Run the app ----
shinyApp(ui, server )
on.exit(dbDisconnect(db), add = TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(fresh)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
renv::restore()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
dosis_data <- data.frame(
cultivo = c("Soja", "Soja", "Soja", "Soja",
"Trigo", "Trigo", "Trigo", "Trigo", "Trigo", "Trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15, 0, 10),  # Límites mínimos de P
P_max = c(5, 10, 15, Inf, 10, Inf)  # Límites máximos de P
)
runApp()
dosis_data <- data.frame(
cultivoP = c("soja", "soja", "soja", "soja",
"trigo", "trigo", "trigo", "trigo", "trigo", "trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15,
0, 10, 15, 20, 25, 30,
0, 10, 15, 20,
0, 5, 10, 15,
0, 10, 15, 20, 25, 30),
P_max = c(5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf,
10, 15, 20, Inf,
5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf)
)
dosis_data
dosis_data <- dosis_data %>%
mutate(
min_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))),
max_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))
)
dosis_data
runApp()
dosis_data <- data.frame(
cultivoP = c("soja", "soja", "soja", "soja",
"trigo", "trigo", "trigo", "trigo", "trigo", "trigo",
"maiz", "maiz", "maiz", "maiz",
"girasol", "girasol", "girasol", "girasol",
"papa", "papa", "papa", "papa", "papa", "papa"),
rango_P = c("< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm", "> 20 ppm",
"< 5 ppm", "5-10 ppm", "10-15 ppm", "> 15 ppm",
"< 10 ppm", "10-15 ppm", "15-20 ppm","20-25 ppm", "25-30 ppm","> 30 ppm"),
dosis = c("15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"20-25 kg/ha", "15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0", "0",
"15-20 kg/ha", "10-15 kg/ha", "8-10 kg/ha", "0",
"15-20 kg/ha", "10-15 kg/ha", "5-10 kg/ha", "0",
"100 kg/ha", "80 kg/ha", "60 kg/ha", "40 kg/ha", "20 kg/ha", "0"),
P_min = c(0, 5, 10, 15,
0, 10, 15, 20, 25, 30,
0, 10, 15, 20,
0, 5, 10, 15,
0, 10, 15, 20, 25, 30),
P_max = c(5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf,
10, 15, 20, Inf,
5, 10, 15, Inf,
10, 15, 20, 25, 30, Inf)
)
dosis_data <- dosis_data %>%
mutate(
min_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))),
max_dosis = as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))
)
dosis_data
runApp()
dosis_data <- dosis_data %>%
mutate(
min_dosis = ifelse(dosis == "0", 0, as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1)))),
max_dosis = ifelse(dosis == "0", 0, as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2))))
)
dosis_data
dosis_data <- dosis_data %>%
mutate(
# Dividir la dosis en min_dosis y max_dosis, manejando el caso cuando dosis es "0"
min_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))), NA)),
max_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2)))),
ifelse(dosis == "100 kg/ha", 100,
ifelse(dosis == "80 kg/ha", 80,
ifelse(dosis == "60 kg/ha", 60,
ifelse(dosis == "40 kg/ha", 40,
ifelse(dosis == "20 kg/ha", 20, NA)))))))
dosis_data <- dosis_data %>%
mutate(
# Dividir la dosis en min_dosis y max_dosis, manejando el caso cuando dosis es "0"
min_dosis = ifelse(dosis == "0", 0,
ifelse(grepl("kg/ha", dosis), as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 1))), NA)),
max_dosis = case_when(
dosis == "0" ~ 0,  # Si la dosis es 0, asignamos 0
dosis == "100 kg/ha" ~ 100,  # Si la dosis es 100 kg/ha, asignamos 100
dosis == "80 kg/ha" ~ 80,  # Si la dosis es 80 kg/ha, asignamos 80
dosis == "60 kg/ha" ~ 60,  # Si la dosis es 60 kg/ha, asignamos 60
dosis == "40 kg/ha" ~ 40,  # Si la dosis es 40 kg/ha, asignamos 40
dosis == "20 kg/ha" ~ 20,  # Si la dosis es 20 kg/ha, asignamos 20
grepl("kg/ha", dosis) ~ as.numeric(gsub(" kg/ha", "", sapply(strsplit(dosis, "-"), "[", 2))),  # Extrae el valor máximo en rangos
TRUE ~ NA_real_  # Si no se cumple ninguna de las condiciones, asigna NA
)
)
dosis_data
runApp()
shiny::runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
shiny::runApp()
shiny::runApp()
output$descarga_modelo <- downloadHandler(
filename = function() {
"data_usuario.xlsx"
},
content = function(file) {
# Crear un dataframe modelo
modelo <- data.frame(
Lote = c(1, 1, 1),
Cultivo = c("maiz", "maiz", "maiz"),
Rendimiento_objetivo = c(NA, NA, NA),
Efecto_antecesor = c(NA, NA, NA),
Proteina_objetivo = c(NA, NA, NA),
Nan_20 = c(NA, NA, NA),
Densidad_aparente = c(1.2, NA, NA),
Estrato = c("0-20", "20-40", "40-60"),
N_nitrato = c(NA, NA, NA),
P_extractable = c(NA, NA, NA),
)
# Crear la segunda hoja: unidades
unidades <- data.frame(
Variable = c("Lote", "Cultivo", "Rendimiento_objetivo", "Efecto_antecesor", "Proteina_objetivo",
"Nan_20", "Densidad_aparente", "Estrato", "N_nitrato", "P_extractable"),
Unidad = c("Número de lote", "Nombre de cultivo", "tn/ha", "kg/ha", "%", "mg/kg", "g/cm³", "Rango de profundidad", "mg/kg", "P Bray")
)
# Crear la tercera hoja: aclaraciones
aclaraciones <- data.frame(
Campo = c("Lote", "Cultivo", "Rendimiento_objetivo"),
Detalle = c(
"Identificación del lote (nombre o código)",
"Cultivo actual sembrado en el lote",
"Rendimiento objetivo esperado del cultivo"
)
)
library(openxlsx)
wb <- createWorkbook()
# Agregar hojas al archivo
addWorksheet(wb, "Modelo")
addWorksheet(wb, "Unidades")
addWorksheet(wb, "Aclaraciones")
# Escribir los datos en las hojas
writeData(wb, "Modelo", modelo)
writeData(wb, "Unidades", unidades)
writeData(wb, "Aclaraciones", aclaraciones)
# Aplicar formato de celdas con fondo gris para las celdas que no requieren datos
estilo_gris <- createStyle(fgFill = "gray90")
addStyle(wb, "Modelo", style = estilo_gris, rows = c(3:4), cols = c(3, 4, 5, 6, 7, 8), gridExpand = TRUE)
# Guardar el archivo temporal
saveWorkbook(wb, file, overwrite = TRUE)
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
runApp('E:/TRABAJO/CERBAS/GrupoAgrometeorologia/App_Meteo')
shiny::runApp()
install.packages("ggpattern")
library(ggpattern)
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("purrr")
runApp()
runApp()
library(purrr)
shiny::runApp()
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
shiny::runApp()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# renv::snapshot()
renv::init()
renv::snapshot()
# renv::snapshot()
renv::init()
shiny::runApp()
runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("ggtext")
runApp()
library(ggtext)
runApp()
runApp()
runApp()
shiny::runApp()
writeLines('PATH="${RTOOLS42_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("gcc")
install.packages("cli", type = "source")
# Instalar remotes si no lo tienes
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
# Instalar shinyauthr desde GitHub
remotes::install_github("PaulC91/shinyauthr")library(shinyauthr)
# Instalar remotes si no lo tienes
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
# Instalar shinyauthr desde GitHub
remotes::install_github("PaulC91/shinyauthr")
shiny::runApp()
runApp()
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
renv::init()
library(writexl)
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
renv::restore()
install.packages(c("colorspace", "munsell"))
renv::status()
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot()
install.packages("rsconnect")
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# renv::init()
# renv::restore()
renv::snapshot() #para capturar todas las dependencias
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
library(rsconnect)
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
# rsconnect::deployApp()
renv::init()
renv::status() #para ver si hay paquetes no instalados
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
e
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
rsconnect::deployApp(appDir = "C:/Users/lewczuk.nuria/OneDrive - Instituto Nacional de Tecnologia Agropecuaria/Escritorio/shiny_app/Nutrientes_suelo", appPrimaryDoc = "app.R",
appName = "Nutrientes_suelo", account = 'intabalcarce', server = 'shinyapps.io')
# rsconnect::forgetDeployment("I:/TRABAJO/CERBAS/Proyectos/Web_fertilizar/fertilizar")
rsconnect::deployApp()
renv::status() #para ver si hay paquetes no instalados
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(bslib)
library(shinymanager)
install.packages("shinymanager")
library(shiny)
library(bslib)
# install.packages("shinymanager")
library(shinymanager)
# credenciales para autenticación
credentials <- data.frame(
user = "usuario",
password = "usuario"
)
ui <- page_fluid(
page_fillable(
card(
h1("Aplicación"),
sliderInput("numeros", "Prueba", 1, 10, 5)
)
)
)
server <- function(input, output, session) {
# autenticación
res_auth <- secure_server(check_credentials = check_credentials(credentials))
}
# autenticación
ui <- secure_app(ui)
shinyApp(ui, server)
library(shinymanager)
# Base de datos inicial de usuarios
# Puedes inicializar una base más avanzada con funciones para agregar nuevos usuarios si es necesario
users <- data.frame(
user = c("admin", "user1"),
password = sapply(c("adminpass", "user1pass"), sodium::password_store),
name = c("Administrador", "Usuario 1"),
email = c("admin@example.com", "user1@example.com"),
admin = c(TRUE, FALSE), # Indica si el usuario es administrador
stringsAsFactors = FALSE
)
# Función para agregar un nuevo usuario
add_new_user <- function(user, password, name, email) {
new_user <- data.frame(
user = user,
password = sodium::password_store(password),
name = name,
email = email,
admin = FALSE, # Por defecto no es administrador
stringsAsFactors = FALSE
)
users <<- rbind(users, new_user)
}
runApp()
runApp()
runApp()
runApp()
runApp()
library(htmlwidgets)
add_eye_icon <- function(id, input_name) {
htmltools::tags$div(
style = "position:relative;",
tags$input(id = input_name,
type = "password",
class = "form-control",
name = input_name),
tags$span(
class = "glyphicon glyphicon-eye-open",
id = paste0(id, "_eye"),
style = "position:absolute; right:10px; top:10px; cursor:pointer; font-size:16px; padding-top:2px; padding-right:2px;"
)
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
usethis::create_github_token()
install.packages(usethis)
install.packages("usethis")
library(usethis)library(usethis)
library(usethis)
usethis::create_github_token()
gitcreds::gitcreds_set()
